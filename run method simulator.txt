    def run(self):

        numInIssueAtClockCycleBegin = 0
        #do iso loop first to determine this, then while pre, post diff is < 2, keep goign (wshiule loop)

        # print(f"preIssueBuff in issue{self.preIssueBuff}")
        for i in range(len(self.preIssueBuff)):
            if self.preIssueBuff[i] != -1:          #if preIssueBuff has valid instr
                numInIssueAtClockCycleBegin += 1
                print(f"len(self.preIssueBuff = {len(self.preIssueBuff)}")
                print(f"numInIssue = {numInIssueAtClockCycleBegin}")

                #if current index instr = "ADDI" (or some other valid instr)
                # and if preALUBuff[0] is empty and preissuebuff[i] == currIndex:
                #   move contents from preIssueBuff[i] to preALUBuff[0], clear preIssueBuff[i] and currAddr++
                #elif preALUBuff[1] is empty and preIssueBuff[i] = currIndex:
                #   move contents from preIssueBuff[i] to preALUBuff[1], clear preIssueBuff[i] and currAddr++

                if self.opcodeStr[self.preIssueBuff[i]] == "ADDI" or self.opcodeStr[self.preIssueBuff[i]] == "ADD"\
                        or self.opcodeStr[self.preIssueBuff[i]] == "SUB" or self.opcodeStr[self.preIssueBuff[i]] == "SUBI"\
                        or self.opcodeStr[self.preIssueBuff[i]] == "AND" or self.opcodeStr[self.preIssueBuff[i]] == "ORR"\
                        or self.opcodeStr[self.preIssueBuff[i]] == "EOR" or self.opcodeStr[self.preIssueBuff[i]] == "LSL":
                    if self.preALUBuff[0] == -1 and self.preIssueBuff[i] == self.currIndex:# and self.address[i] == self.memIndexOfNext:    #and if preALUBuff has open slot
                        self.preALUBuff[0] = self.preIssueBuff[i]
                        self.preIssueBuff[i] = -1           #set preissuebuff back to -1
                        self.currIndex += 1
                        # self.memIndexOfNext += 4

                    elif self.preALUBuff[1] == -1 and self.preIssueBuff[i] == self.currIndex:# and self.address[i] == self.memIndexOfNext:
                        self.preALUBuff[1] = self.preIssueBuff[i]
                        self.preIssueBuff[i] = -1       #set preissuebuff back to -1
                        self.currIndex += 1
                        # self.memIndexOfNext += 4


        #print(f"num at end{numInIssueAtClockCycleBegin}")

        # print(f"pre")

        # return Issue(self.preIssueBuff, self.preMemBuff, self.preALUBuff, self.instruction, self.opcode, self.opcodeStr,
        #          self.dataval, self.address, self.arg1, self.arg2, self.arg3, self.numInstructions, self.destReg, self.src1Reg, self.src2Reg)


        return [self.preMemBuff, self.preALUBuff, self.preIssueBuff]

        # curr = self.preIssueBuff[0]
